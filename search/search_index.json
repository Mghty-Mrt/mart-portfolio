{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"About Me"},{"location":"#education","title":"\ud83c\udf93 Education","text":"<p>Quezon City University \ud83d\udcc5September 14, 2020 - June 27, 2024</p> <p>Bachelor of Science in Information Technology</p> <ul> <li>Cum Laude</li> <li>Quezon City University Scholar</li> </ul> <p>Aspiring System Administrator/DevOps Engineer with a solid foundation in managing multi-branch Linux deployments. Currently based at Wilcon Depot Head Office, I specialize in enhancing infrastructure efficiency and reliability through meticulous patching and maintenance of ETP servers and POS systems, systematic troubleshooting, and reconfiguring system errors. My expertise extends to monitoring critical infrastructure using VMware vSphere ESXi.</p> <p>I am passionate about leveraging open-source technologies and automation to address operational challenges and support scalable IT solutions. With a keen interest in DevOps, I am actively developing skills in scripting, CI/CD pipelines, containerization, and cloud platforms.</p> <p>I excel in fast-paced environments and thrive on collaborating with cross-functional teams to drive impactful results. Through continuous learning and hands-on experience, I am dedicated to mastering the art of seamless and efficient deployment processes.</p>"},{"location":"Skills/","title":"\ud83d\udee0\ufe0f Technical Skills","text":""},{"location":"Skills/#infrastructure-system-administration","title":"\ud83d\udda5\ufe0f Infrastructure &amp; System Administration","text":"<p>Linux ( Ubuntu, Debian):</p> <ul> <li>VMware ESXi </li> <li>Static IP Assignment </li> <li>SSL/Certificate Management </li> <li>Virtualization </li> <li>Host Server Operations</li> </ul> <p>Containerization &amp; Automation | Deployment Docker:</p> <ul> <li>Docker Compose </li> <li>Kong API Gateway </li> <li>Konga GUI </li> <li>Nginx</li> <li>Caddy</li> <li>Ansible </li> <li>Bash Scripting</li> </ul> <p>Monitoring &amp; Observability: </p> <ul> <li>Prometheus </li> <li>Grafana </li> <li>Promtail </li> <li>Zabbix </li> <li>NocoDB</li> </ul> <p>Storage &amp; Replication: </p> <ul> <li>Nextcloud </li> <li>Samba </li> <li>Duplicati </li> <li>Syncthing</li> </ul> <p>Platform Administration: </p> <ul> <li>FreePBX </li> <li>3CX </li> <li>Remotely </li> <li>Guacamole</li> </ul> <p>Database: </p> <ul> <li>MySQL </li> <li>MSSQL</li> </ul> <p>Tools: </p> <ul> <li>Github</li> <li>Airtable </li> <li>PuTTY </li> <li>Termius </li> <li>Screen</li> </ul>"},{"location":"Skills/#aws-learning-phase","title":"\ud83d\udcd8 AWS Learning Phase","text":"<p>AWS-Cloud: </p> <ul> <li>IAM </li> <li>EC2 </li> <li>Load Balancer </li> <li>CLI Access </li> <li>Migration </li> <li>EBS </li> <li>Auto Scaling </li> <li>Terraform (Basic Instance)</li> </ul>"},{"location":"Skills/#soft-skills","title":"\ud83e\udd1d Soft Skills","text":"<ul> <li>Communication, Proactiveness, Critical Thinking</li> <li>Analytical thinker with strong troubleshooting abilities</li> <li>A great manager of time and knows how to prioritize urgent &amp; important matters.</li> <li>Quick learner across hardware, software, tools and frameworks</li> <li>Organized, detail-oriented, and calm under pressure</li> <li>Collaborative and independent team player</li> <li>Strong communication and documentation skills</li> <li>Prioritizes operational clarity and system maintainability</li> <li>Committed to continuous learning and knowledge sharing</li> </ul>"},{"location":"Work%20Experience/","title":"\ud83e\uddd1\u200d\ud83d\udcbb Work Experience","text":"<p>Jr. System Administrator Wilcon Depot Head Office</p> <ul> <li>\ud83d\udcc5 Nov 26, 2024 - Present</li> </ul>"},{"location":"Work%20Experience/#infrastructure-load-balancing","title":"\ud83d\udd27 Infrastructure &amp; Load Balancing","text":"<ul> <li> <p>Deployed a resilient Kong API Gateway cluster with three load-balanced nodes for high availability and seamless traffic routing.</p> </li> <li> <p>Built an NGINX load balancer in Docker Compose with real-time health checks and auto-rerouting to healthy Kong nodes.</p> </li> </ul>"},{"location":"Work%20Experience/#observability-logging","title":"\ud83d\udcca Observability &amp; Logging","text":"<ul> <li> <p>Centralized Kong logs via Promtail with tagged metadata and failover transparency in Grafana.</p> </li> <li> <p>Verified cluster failover through controlled node outages and recovery testing to meet uptime goals.</p> </li> </ul>"},{"location":"Work%20Experience/#metrics-monitoring","title":"\ud83d\udcc8 Metrics &amp; Monitoring","text":"<ul> <li>Implemented a full observability stack (Prometheus, Grafana, Promtail) with dashboards for API performance and error tracking.</li> </ul>"},{"location":"Work%20Experience/#virtualization-resource-optimization","title":"\ud83d\udda5\ufe0f Virtualization &amp; Resource Optimization","text":"<ul> <li> <p>Managed VMware vSphere ESXi stack for consolidating services and optimizing infrastructure resources.</p> </li> <li> <p>Confidently administered VMware ESXi environments, enabling the reduction of physical server needs by implementing a scalable and virtualized infrastructure.</p> </li> <li> <p>Utilized virtualization to create, clone, and migrate servers efficiently, optimizing resource utilization and enhancing flexibility in server management.</p> </li> </ul>"},{"location":"Work%20Experience/#linux-system-oversight","title":"\ud83d\udee0\ufe0f Linux System Oversight","text":"<ul> <li>Managed Ubuntu/Debian Servers: Ensured secure, multi-tenant environments by administering Ubuntu/Debian servers, implementing best practices for system security and performance optimization.</li> </ul>"},{"location":"Work%20Experience/#standerdized-deployments-with-docker-compose","title":"\ud83d\udc33 Standerdized Deployments with Docker Compose:","text":"<ul> <li> <p>Developed and utilized Docker Compose to create standardized deployment processes for efficient application management. </p> </li> <li> <p>Implemented containerization strategies that simplified configuration modifications and ensured isolated networking for specific groups of containers.</p> </li> <li> <p>Organized deployment projects by creating structured folders containing Docker Compose files, which facilitated easy access to configurations and insights into the containerized application's environment, including configurations, databases, and directory structures.</p> </li> </ul>"},{"location":"Work%20Experience/#optimized-server-provisioning-with-ansible","title":"\u2699\ufe0f Optimized Server Provisioning with Ansible:","text":"<ul> <li> <p>Created and maintained Ansible scripts for automating the provisioning and configuration of multiple servers simultaneously.</p> </li> <li> <p>Ensured applications were deployed across servers with uniform configurations, enhancing consistency, reducing setup time, and minimizing configuration drift.</p> </li> </ul>"},{"location":"Work%20Experience/#reverse-proxy-design","title":"\ud83d\udd10 Reverse Proxy Design","text":"<ul> <li> <p>Configured NGINX as a reverse proxy to enhance security and efficiently manage incoming traffic. </p> </li> <li> <p>Implemented access control measures ensuring that internal resources were accessible only via DNS, masking real IP addresses for added security.</p> </li> <li> <p>Built flexible reverse proxy layers with Nginx and Caddy for SSL termination and dynamic route management.</p> </li> </ul>"},{"location":"Work%20Experience/#database-administration","title":"\ud83d\uddc3\ufe0f Database Administration","text":"<ul> <li>Administered MySQL and MSSQL databases for internal tools and monitoring systems.</li> </ul>"},{"location":"Work%20Experience/#platform-integration-service-management-for-internal-use","title":"\ud83e\udde9 Platform Integration &amp; Service Management for internal use","text":"<ul> <li>Integrated communication (FreePBX, 3CX)</li> <li>Storage (Samba, Nextcloud, Syncthing)</li> <li>Backup (Duplicati)</li> <li>Remote Access (Remotely)</li> </ul>"},{"location":"Projects/Free%20PBX/","title":"Free PBX Server","text":""},{"location":"Projects/Free%20PBX/#free-pbx-dashboard","title":"Free PBX Dashboard","text":""},{"location":"Projects/Free%20PBX/#extensions","title":"Extensions","text":"<ul> <li>Internal numbers assigned to employees and managers for direct communication within the PBX.</li> </ul>"},{"location":"Projects/Free%20PBX/#queues","title":"Queues","text":"<ul> <li>Call groups that route incoming calls\u2014starting with Helpdesk, which forwards them to the right team based on client needs.</li> </ul>"},{"location":"Projects/Free%20PBX/#3cx","title":"3CX","text":"<ul> <li>This is the 3CX softphone interface I use for managing SIP accounts. The active account is for our IT team, while the others are test accounts I configured to simulate multi-branch setups and validate call routing, presence, and provisioning workflows.</li> </ul>"},{"location":"Projects/Guacamole/","title":"Guacamole Server","text":""},{"location":"Projects/Guacamole/#guacamole-dashboard","title":"Guacamole Dashboard","text":"<ul> <li>This is the Guacamole dashboard I maintain for remote access to replicated branch systems. As guacadmin, I manage access, naming, and grouping for scalability.</li> </ul>"},{"location":"Projects/Guacamole/#connections","title":"Connections","text":"<ul> <li>This is the Guacamole dashboard I maintain for secure, scalable remote access to branch systems. As guacadmin, I manage protocols, naming, and grouping for redundancy and ease of troubleshooting.  </li> </ul>"},{"location":"Projects/Homarr%20Dashboard/","title":"Homarr Dashboard","text":"<ul> <li>This is my internal dashboard for centralized access to monitoring, remote tools, and key infrastructure. I grouped services for quick visibility and built it to streamline troubleshooting, improve handoff, and scale transparently across branches.</li> </ul>"},{"location":"Projects/Kong%20API%20Gateway/","title":"Kong API Gateway","text":""},{"location":"Projects/Kong%20API%20Gateway/#kong-servers","title":"Kong Servers","text":"<p>Connections</p> <ul> <li>This shows how I manage multiple Kong nodes in KONGA, with versioning and activation controls for each gateway ensuring modular, testable, and scalable API infrastructure.</li> </ul> <p> </p> <p>Services</p> <ul> <li>This is the service configuration panel for infor, where I define protocol, host, and port\u2014standardizing upstream service registration for secure, consistent routing.</li> </ul> <p> </p> <p>Routes</p> <ul> <li>This route setup defines how traffic is matched and forwarded using host/path rules and protocol filters\u2014critical for precise API gateway routing and regex-based prioritization.</li> </ul> <p> </p> <p>Plugins</p> <ul> <li>Here I\u2019ve attached Prometheus for metrics, File-log for persistent logging, and Basic-auth for access control\u2014demonstrating layered observability and security across all consumers.</li> </ul> <p> </p> <p>Basic Auth | Credentials</p> <ul> <li>This shows how I assign Basic Auth credentials to the infor consumer in Kong, enabling secure, credential-based access to protected routes.</li> </ul> <p> </p> <p>Accessible Routes</p> <ul> <li>This interface displays the plugins and routes accessible to infor, where I\u2019ve layered Prometheus for metrics, File Log for audit trails, and Basic Auth for authentication\u2014ensuring observability and access control per consumer.</li> </ul> <p> </p>"},{"location":"Projects/Kong%20API%20Gateway/#nginx-load-balancer","title":"NGINX Load Balancer","text":"<p>NGINX Configuration</p> <ul> <li>This NGINX config defines SSL-secured reverse proxying to production and test upstreams, with standardized headers\u2014enabling seamless API routing across multiple domains and environments.</li> </ul> <p> </p> <p> </p> <p> </p> <p>SSL Certificate Files</p> <p> </p>"},{"location":"Projects/Kong%20API%20Gateway/#prometheus","title":"Prometheus","text":"<ul> <li>This shows Prometheus successfully scraping metrics from three Kong nodes each labeled under the kong job and reporting healthy (UP) status validating multi-node observability and real-time gateway monitoring.</li> </ul>"},{"location":"Projects/Kong%20API%20Gateway/#grafana","title":"Grafana","text":"<p>Grafana Dashboard</p> <ul> <li>This Grafana dashboard visualizes real-time API traffic, success/error rates, and request durations\u2014helping us monitor endpoint health and troubleshoot issues quickly using logs filtered by client IP, method, and environment.</li> </ul> <p> </p> <p>Data Sources</p> <ul> <li>This shows my Grafana setup with Prometheus and Loki configured as data sources enabling unified metrics and log observability across our infrastructure.\"</li> </ul> <p> </p> <p>Prometheus Config</p> <ul> <li>This is the Prometheus data source setup, pointing to http://prometheus:9090, which I use for real-time system metrics and alerting.</li> </ul> <p> </p> <p>Loki Config</p> <ul> <li>This is the Loki data source setup at http://loki:3100, which powers centralized log aggregation and filtering for all services.</li> </ul> <p> </p>"},{"location":"Projects/Remotely/","title":"Remotely Dashboard","text":"<ul> <li>This is my Remotely dashboard showing real-time device metrics\u2014user, platform, disk, and memory usage\u2014for proactive monitoring and performance management</li> </ul>"},{"location":"Projects/Remotely/#remotely-deploy-agent","title":"Remotely Deploy Agent","text":"<ul> <li>This section provides remote deployment commands for persistent agents across Windows, Ubuntu, and Manjaro, enabling secure and scalable remote support.</li> </ul>"},{"location":"Projects/Remotely/#remotely-docker-containers","title":"Remotely Docker Containers","text":"<ul> <li>This shows my Docker setup for Remotely and Caddy, running as containers with persistent health checks and exposed ports for secure remote access.</li> </ul>"},{"location":"Projects/Remotely/#caddy-as-reverse-proxy","title":"Caddy as Reverse Proxy","text":"<ul> <li>This is my Caddyfile configuration, where I set up TLS and reverse proxy rules to route traffic to the Remotely container securely.</li> </ul>"},{"location":"Projects/VMware/","title":"ESXI GUI Client","text":""},{"location":"Projects/VMware/#sample-of-created-servers","title":"Sample of Created Servers","text":""},{"location":"Projects/cicd/","title":"Simple CI/CD Workflow","text":"<p>Github Actions Workflow for MkDocs Deployment:</p> <ul> <li>This workflow automates MkDocs Material deployment to GitHub Pages on every push to main or master, using Python setup, caching, and forced gh-deploy for seamless documentation updates.</li> </ul> <p> </p> <p>CI Workflow</p> <ul> <li>This workflow runs automated checks on every commit to ensure documentation integrity and fast feedback.</li> </ul> <p> </p> <p>Pages Build-Deployment</p> <ul> <li>This workflow builds and deploys the MkDocs site to GitHub Pages automatically after each push.</li> </ul> <p> </p>"},{"location":"Projects/AWS%20Project/Creating%20IAM%20User/","title":"Creating IAM User","text":"<ul> <li>Go to Services and search for IAM</li> </ul> <ul> <li>Click create user and edit your preferences for the new IAM user</li> </ul> <ul> <li>Successfully provisioned IAM user \"mart\" with console access.</li> </ul>"},{"location":"Projects/AWS%20Project/Creating%20IAM%20User/#add-user-to-a-group","title":"Add User to a group","text":"<ul> <li>you can choose what to do the IAM user <code>add user to group , copy permission or attach policies directly.</code></li> </ul> <ul> <li>Check the User Group admin and see if user <code>mart</code> is there</li> </ul> <ul> <li>review your configuration and make sure to download the <code>.csv file</code> and email to the user</li> </ul>"},{"location":"Projects/AWS%20Project/Creating%20IAM%20User/#access-key","title":"Access Key","text":"<ul> <li>Create Access key for Programmically Use</li> </ul> <ul> <li>Retrieve and save both access keysif lost, they can't be recovered and must be replaced.</li> </ul>"},{"location":"Projects/AWS%20Project/Creating%20IAM%20User/#verifying-iam-user","title":"Verifying IAM User","text":"<ul> <li>Verify that the <code>IAM user</code> can access AWS by testing credentials in your machine\u2019s <code>CLI</code>.</li> </ul>"},{"location":"Projects/AWS%20Project/Creating%20IAM%20User/#delete-iam-user","title":"Delete IAM User","text":"<ul> <li>Go to the IAM User Console GUI and Click delete  </li> </ul> <ul> <li>Check if the IAM Users if User <code>mart</code>  is deleted</li> </ul>"},{"location":"Projects/AWS%20Project/Implementing%20Load%20Balancing/","title":"Application Load Balancing (ALB)","text":""},{"location":"Projects/AWS%20Project/Implementing%20Load%20Balancing/#creating-2-instances","title":"Creating 2 Instances","text":"<ul> <li>Start by launching two EC2 instances these will serve as targets for the Application Load Balancer.</li> </ul> <ul> <li>Added simple scripts to set up a web server and display the instance\u2019s IP address using <code>echo</code> for quick verification and testing.</li> </ul> <ul> <li>Verified both EC2 instances are running the web server and responding correctly confirming successful setup and connectivity.</li> </ul>"},{"location":"Projects/AWS%20Project/Implementing%20Load%20Balancing/#creating-application-load-balancer","title":"Creating Application Load Balancer","text":"<ul> <li>Next, create an Application Load Balancer to distribute traffic evenly across the two EC2 instances.</li> </ul> <ul> <li>Configured public IPv4 IPAM pool and selected three subnets across availability zones <code>ap-southeast-1a, 1b, and 1c.</code> This ensures high availability and fault tolerance for the Application Load Balancer</li> </ul> <ul> <li>Allowed HTTP (port 80) for public access. Outbound traffic is fully open for updates and connectivity.</li> </ul> <ul> <li>Created target group demo-tg-alb using HTTP on port 80 with IPv4 in VPC vpc-001f0ac53ff80ab6d. This config ensures traffic routing to EC2 instances via ALB with HTTP1 protocol.</li> </ul> <ul> <li>Added two EC2 instances to target group demo-tg-alb for HTTP traffic on port 80.</li> </ul> <ul> <li>Created demoALB, an internet-facing Application Load Balancer across three subnets for high availability. Screenshot shows its transition from Provisioning to Active status, confirming successful setup.</li> </ul>"},{"location":"Projects/AWS%20Project/Implementing%20Load%20Balancing/#checking-if-alb-is-running-correctly","title":"Checking if ALB is running correctly","text":"<ul> <li>Accessed the ALB URL and confirmed traffic is routing to both EC2 instances. Each response shows a unique internal IP, proving round-robin distribution is working.</li> </ul> <ul> <li>Two EC2 instances added to target group demo-tg-alb. One is running and marked Healthy, the other is Stopped and marked Unused. Load Balancer routes traffic only to active targets.</li> </ul> <ul> <li>After stopping the first EC2 instance, the Load Balancer automatically detected its unhealthy status and routed traffic only to the remaining active instance. This confirms proper health check configuration and failover behavior.</li> </ul>"}]}